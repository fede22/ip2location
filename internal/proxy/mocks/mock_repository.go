// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	proxy "github.com/fede22/ip2location/internal/proxy"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetProxies mocks base method
func (m *MockRepository) GetProxies(countryCode string, limit int) ([]proxy.Proxy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProxies", countryCode, limit)
	ret0, _ := ret[0].([]proxy.Proxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProxies indicates an expected call of GetProxies
func (mr *MockRepositoryMockRecorder) GetProxies(countryCode, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProxies", reflect.TypeOf((*MockRepository)(nil).GetProxies), countryCode, limit)
}

// GetProxy mocks base method
func (m *MockRepository) GetProxy(address proxy.NetIP) (proxy.Proxy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProxy", address)
	ret0, _ := ret[0].(proxy.Proxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProxy indicates an expected call of GetProxy
func (mr *MockRepositoryMockRecorder) GetProxy(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProxy", reflect.TypeOf((*MockRepository)(nil).GetProxy), address)
}

// GetISPs mocks base method
func (m *MockRepository) GetISPs(countryCode string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetISPs", countryCode)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetISPs indicates an expected call of GetISPs
func (mr *MockRepositoryMockRecorder) GetISPs(countryCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetISPs", reflect.TypeOf((*MockRepository)(nil).GetISPs), countryCode)
}

// GetIPCount mocks base method
func (m *MockRepository) GetIPCount(countryCode string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPCount", countryCode)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPCount indicates an expected call of GetIPCount
func (mr *MockRepositoryMockRecorder) GetIPCount(countryCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPCount", reflect.TypeOf((*MockRepository)(nil).GetIPCount), countryCode)
}

// TopProxyTypes mocks base method
func (m *MockRepository) TopProxyTypes(limit int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopProxyTypes", limit)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopProxyTypes indicates an expected call of TopProxyTypes
func (mr *MockRepositoryMockRecorder) TopProxyTypes(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopProxyTypes", reflect.TypeOf((*MockRepository)(nil).TopProxyTypes), limit)
}
