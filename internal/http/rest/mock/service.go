// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock is a generated GoMock package.
package mock

import (
	domain "github.com/fede22/ip2location/internal/domain"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetProxy mocks base method
func (m *MockService) GetProxy(address string) (domain.Proxy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProxy", address)
	ret0, _ := ret[0].(domain.Proxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProxy indicates an expected call of GetProxy
func (mr *MockServiceMockRecorder) GetProxy(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProxy", reflect.TypeOf((*MockService)(nil).GetProxy), address)
}

// GetISPs mocks base method
func (m *MockService) GetISPs(countryCode string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetISPs", countryCode)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetISPs indicates an expected call of GetISPs
func (mr *MockServiceMockRecorder) GetISPs(countryCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetISPs", reflect.TypeOf((*MockService)(nil).GetISPs), countryCode)
}

// GetIPs mocks base method
func (m *MockService) GetIPs(countryCode string, limit int) ([]domain.IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPs", countryCode, limit)
	ret0, _ := ret[0].([]domain.IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPs indicates an expected call of GetIPs
func (mr *MockServiceMockRecorder) GetIPs(countryCode, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPs", reflect.TypeOf((*MockService)(nil).GetIPs), countryCode, limit)
}

// GetIPCount mocks base method
func (m *MockService) GetIPCount(countryCode string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPCount", countryCode)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPCount indicates an expected call of GetIPCount
func (mr *MockServiceMockRecorder) GetIPCount(countryCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPCount", reflect.TypeOf((*MockService)(nil).GetIPCount), countryCode)
}

// GetTopProxyTypes mocks base method
func (m *MockService) GetTopProxyTypes(limit int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopProxyTypes", limit)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopProxyTypes indicates an expected call of GetTopProxyTypes
func (mr *MockServiceMockRecorder) GetTopProxyTypes(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopProxyTypes", reflect.TypeOf((*MockService)(nil).GetTopProxyTypes), limit)
}
